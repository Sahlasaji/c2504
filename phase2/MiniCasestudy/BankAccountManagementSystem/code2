Account.cs

  
namespace BankManagementSystem.Models
{
    public class Account : INotifyPropertyChanged
    {
        private decimal _balance;
        public int AccountNumber { get; set; }
        public string Name { get; set; }
        public decimal Balance
        {
            get { return _balance; }
            set
            {
                _balance = value;
                OnPropertyChanged(nameof(Balance));
            }
        }
        public string Type { get; set; }
        public String Email { get; set; }
        public String PhoneNumber { get; set; }

        private string _address;

        public string Address
        {
            get { return _address; }
            set 
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        public bool IsActive{ get; set; }
        public string InterestPercentage  { get; set; }

        private int _transactionCount;

        public int TransactionCount
        {
            get { return _transactionCount; }
            set 
            { 
                _transactionCount = value;
                OnPropertyChanged(nameof(TransactionCount));
            }
        }

        private DateTime _lastTrasnsactionDate;

        public DateTime LastTransactionDate
        {
            get { return _lastTrasnsactionDate; }
            set 
            {
                _lastTrasnsactionDate = value;
                OnPropertyChanged(nameof(LastTransactionDate));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            if(PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}



AccountException.cs

  
  namespace BankManagementSystem.Exceptions
{
    public class AccountException : Exception
    {
        public AccountException() : base() { }

        public AccountException(string message) : base(message) { }

        public AccountException(string message, Exception innerException) : base(message, innerException) { }

        public AccountException(string message, string accountNumber, string accountName) : base(message)
        {
            AccountNumber = accountNumber;
            AccountName = accountName;
        }

        public string AccountNumber { get; set; }

        public string AccountName { get; set; }

        public override string ToString()
        {
            return $"AccountException: {Message} - Account Number: {AccountNumber} - Account Name: {AccountName}";
        }
    }
}


DashBoardWindow.xaml


  <Window x:Class="BankManagementSystem.Pages.DashBoardWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="DashBoardWindow" Height="450" Width="800" Closed="Window_Closed" Closing="Window_Closing">

    
    
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="DashBoard" FontSize="32" FontWeight="bold" Grid.Row="0" Margin="10 20 10 10"/>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock FontWeight="bold" FontSize="10" Margin="10 10 10 2">Your Balance</TextBlock>
                    <TextBlock  FontSize="42" Margin="30 2 10 2" Foreground="green">$2000</TextBlock>
                </StackPanel>
            </Border>

            <Button x:Name="btnDeposit" Grid.Column="1" Margin="20 0 0 0" Content="Deposit" FontSize="12"
                  Background="white" FontWeight="Bold"
                  Foreground="black"
                    Click="btnDeposit_Click"/>
            

            <Button x:Name="btnWithdraw" Grid.Column="2" Margin="20 0 0 0" Content="Withdraw" FontSize="12"
                       Background="white" FontWeight="Bold"
                        Foreground="black"
                    Click="btnWithdraw_Click"/>
            
            <Button x:Name="btnManager" Grid.Column="3" Margin="20 0 0 0" Content="Account Manager" FontSize="12"
           Background="white" FontWeight="Bold"
            Foreground="black"
                    Click="btnManager_Click"/>
        </Grid>
        <Grid Grid.Row="2" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Teal"
                    CornerRadius="3">
                
            </Border>

            <Border Grid.Column="1" Background="#9e0344" Margin="10 0 0 0" CornerRadius="3">

            </Border>
        </Grid>
    </Grid>
</Window>

  DashBoardWindow.xaml.cs
  
namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for DashBoardWindow.xaml
    /// </summary>
    public partial class DashBoardWindow : Window
    {
        public DashBoardWindow()
        {
            InitializeComponent();
        }

        private void btnDeposit_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.depositWindow.Show();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnManager_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.accountListWindow.Show();
        }

        private void btnWithdraw_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.withdrawWindow.Show();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
  DepositWindow.xaml


    <Window x:Class="BankManagementSystem.Pages.DepositWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:DepositViewModel}"
        mc:Ignorable="d"
        Title="DepositWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
                CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                           FontSize="14" />
                    <TextBox Width="300" Height="30" Margin="10 0 0 0" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
           FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 10 0 0" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Deposit" Background="Green" Foreground="white" FontWeight="bold"
                        Width="250" Height="50" Margin="0 20 0 0"
                        Command="{Binding DepositCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>

     DepositWindow.xaml.cs

    namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for DashBoardWindow.xaml
    /// </summary>
    public partial class DashBoardWindow : Window
    {
        public DashBoardWindow()
        {
            InitializeComponent();
        }

        private void btnDeposit_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.depositWindow.Show();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnManager_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.accountListWindow.Show();
        }

        private void btnWithdraw_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.withdrawWindow.Show();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }



LoginPageWindow.xaml

  <Window x:Class="BankManagementSystem.Pages.LoginPageWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="LoginPageWindow" Height="450" Width="800" Closed="Window_Closed">
    <Grid >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Border Grid.Column="0"  Background="AliceBlue" Width="300" Height="300" CornerRadius="5">
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <StackPanel Orientation="Vertical" Margin="10 10 10 0">
                    <TextBlock  Text="Username" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <TextBox x:Name="txtUsername" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
                </StackPanel>

                <StackPanel Orientation="Vertical" Margin="10 0 10 10">
                    <TextBlock Text="Password" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <PasswordBox x:Name="txtPassword" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
                    
                </StackPanel>

                <Button Width="200" Content="Login" Height="30" Background="Teal" Foreground="white" FontWeight="Bold" FontSize="10" Margin="10 10 10 10" Click="Button_Click"/>
            </StackPanel>
            
        </Border>
    </Grid>
</Window>

  LoginPageWindow.xaml.cs

  
namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for LoginPageWindow.xaml
    /// </summary>
    public partial class LoginPageWindow : Window
    {
        public LoginPageWindow()
        {
            InitializeComponent();

        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if(txtUsername.Text == "quest" && txtPassword.Password == "1234")
            {
                FormConfig.dashBoardWindow.Show();
                this.Hide();
            }
            else
            {
                MessageBox.Show(messageBoxText: $"Invalid username or password",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);
                return;
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}

WithdrawalWindow.xaml

  <Window x:Class="BankManagementSystem.Pages.WithdrawWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="WithdrawWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
            CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                       FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 0 0 0" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
       FontSize="14"/>
                    <TextBox Width="300" Height="30" Margin="10 10 0 0" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Withdraw" Background="Green" Foreground="white" FontWeight="bold"
                    Width="250" Height="50" Margin="0 20 0 0"
                        Command="{Binding WithdrawCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>

  WithdrawalWindow.xaml.cs

  namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for WithdrawWindow.xaml
    /// </summary>
    public partial class WithdrawWindow : Window
    {
        public WithdrawWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.withdrawViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

AccountViewModelWindow

<Window x:Class="BankManagementSystem.Pages.AccountViewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:AccountViewModel}"
        mc:Ignorable="d"
        Title="AccountViewWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="Account Details" FontSize="32" FontWeight="bold" Grid.Row="0" Margin="10 20 10 10"/>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <!--<ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>-->
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock FontWeight="bold" FontSize="12" Margin="10 10 10 2">Account Balance</TextBlock>
                    <TextBlock  FontSize="24" Margin="20 2 10 2" Foreground="green" Text="{Binding SelectedAccount.Balance}"/>
                </StackPanel>
            </Border>
        </Grid>
        <Grid Grid.Row="2" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Teal"
                CornerRadius="3">
                <StackPanel Orientation="vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Account Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.AccountNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Name" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Name}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Type" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Type}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Email" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Email}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Phone Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.PhoneNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Address" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Address}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Transaction Count" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.TransactionCount}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Last Transaction" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.LastTransactionDate}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Interest Percentage" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.InterestPercentage}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                </StackPanel>
            </Border>

            <Border Grid.Column="1" Background="#9e0344" Margin="10 0 0 0" CornerRadius="3">

            </Border>
        </Grid>
    </Grid>
</Window>

  AccountViewModelWindow.cs

  namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for AccountViewWindow.xaml
    /// </summary>
    public partial class AccountViewWindow : Window
    {
        public AccountViewWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}


DepositViewModel.cs

  namespace BankManagementSystem.ViewModels
{
    public class DepositViewModel : ViewModelBase
    {
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set 
            {
                _accountNumber = value; 
                onPropertyChanged(nameof(AccountNumber));
            }

        }

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set 
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        public ICommand DepositCommand {  get;}
        
        public DepositViewModel()
        {
            DepositCommand = new RelayCommand(Deposit);
        }

        public void Deposit()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Deposit?",
                   caption: "Confirm",
                   button: MessageBoxButton.YesNo,
                   icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Deposit(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Deposited Successfully to account {AccountNumber}",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Deposited {Amount} rupees Successfully to account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch(AccountException ae)
            {
                MessageBox.Show(messageBoxText: $"{ae.Message}",
               caption: "Warning",
               button: MessageBoxButton.OK,
               icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
            }



            
        }




WithdrawViewModel.cs

  namespace BankManagementSystem.ViewModels
{
    public class WithdrawViewModel : ViewModelBase
    {
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                onPropertyChanged(nameof(AccountNumber));
            }

        }

        private int _amount;

        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        public ICommand WithdrawCommand { get; }

        public WithdrawViewModel()
        {
            WithdrawCommand = new RelayCommand(Withdraw);
        }

        public void Withdraw()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
                   caption: "Confirm",
                   button: MessageBoxButton.YesNo,
                   icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Withdrw(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Withdrawed Successfully from account {AccountNumber}",
                       caption: "Alert",
                       button: MessageBoxButton.OK,
                       icon: MessageBoxImage.Information);
                Logger.log.Info($"Withdrawed {Amount} rupees Successfully from account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch (AccountException ae)
            {

                MessageBox.Show(messageBoxText: $"{ae.Message}",
               caption: "Warning",
               button: MessageBoxButton.OK,
               icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch(Exception ex)
            {
                Logger.log.Error(ex.Message);
            }
            
            
        }
    }
}

